package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/kenta-afk/gqlgen-todos/graph/model"
)

// CreateTodoはcreateTodoフィールドのリゾルバです。
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// ランダムなIDを生成します。
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	// 新しいTodoを作成します。
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", randNumber),
		UserID: input.UserID,
		User:   &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	// Todoリストに追加します。
	r.todos = append(r.todos, todo)

	// サブスクリプションに通知します。
	r.mu.Lock()
	for _, subscriber := range r.todoSubscribers {
		subscriber <- todo
	}
	r.mu.Unlock()

	return todo, nil
}

// Todosはtodosフィールドのリゾルバです。
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// TodoAddedはtodoAddedフィールドのリゾルバです。
func (r *subscriptionResolver) TodoAdded(ctx context.Context) (<-chan *model.Todo, error) {
	todoChan := make(chan *model.Todo, 1)
	r.mu.Lock()
	r.todoSubscribers = append(r.todoSubscribers, todoChan)
	r.mu.Unlock()
	return todoChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
