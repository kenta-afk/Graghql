package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/kenta-afk/gqlgen-todos/graph/model"
)

// CreateRoomはcreateRoomフィールドのリゾルバです。
func (r *mutationResolver) CreateRoom(ctx context.Context, input model.NewRoom) (*model.Room, error) {
	// ランダムなIDを生成します。
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	// 新しいRoomを作成します。
	room := &model.Room{
		ID: fmt.Sprintf("R%d", randNumber),
		Users: func() []*model.User {
			users := make([]*model.User, len(input.UserIds))
			for i, userID := range input.UserIds {
				users[i] = &model.User{ID: userID, Name: "user " + userID}
			}
			return users
		}(),
	}
	// Roomリストに追加します。
	r.rooms = append(r.rooms, room)

	// サブスクリプションに通知します。
	r.mu.Lock()
	for _, subscriber := range r.roomSubscribers {
		subscriber <- room
	}
	r.mu.Unlock()

	return room, nil
}

// Roomsはroomsフィールドのリゾルバです。
func (r *queryResolver) Rooms(ctx context.Context) ([]*model.Room, error) {
	return r.rooms, nil
}

// RoomAddedはroomAddedフィールドのリゾルバです。
func (r *subscriptionResolver) RoomAdded(ctx context.Context) (<-chan *model.Room, error) {
	roomChan := make(chan *model.Room, 1)
	r.mu.Lock()
	r.roomSubscribers = append(r.roomSubscribers, roomChan)
	r.mu.Unlock()
	return roomChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	type Resolver struct {
	rooms           []*model.Room
	mu              sync.Mutex
	roomSubscribers []chan *model.Room
}
*/
